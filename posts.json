[{"timestamp":1601679600000,"author":"Paolo","title":"Experiment","postFileContent":"<article \n\tdata-published-date=\"2020-10-03-00-00-00\"\n\tdata-author=\"Paolo\"\n>\n\t<h2>Experiment</h2>\n\t<p>Posted by Paolo on 3rd October 2020</p>\n\t<p>From what I remember, it was a regularly restless afternoon at work with a small recruitment company in London. I had felt for some time that I needed to make a change and I knew that, despite some appealing aspects, the recruitment industry was not for me. I did, and still do, enjoy speaking to people. It was rewarding to put a candidate forward for a role and for them to be offered an interview, and it was a privilege to be able to share some of the excitement when telling someone they got the job! So while there were parts of my job that I found interesting, I wanted to find a creative outlet. I got satisfaction from solving challenges and I was curious about the world of web design. I'm not even sure what it was that appealed to me about it, but I seemed to enjoy making things appear on the screen and I got a buzz to think that someone on the other side of the world could see it. At the time I wasn't really aware of the distinction between web design and web development. All I knew was that I wanted to learn how to make a website. At the time resources such as <a href=\"https://www.udemy.com/\">Udemy</a> and <a href=\"https://teamtreehouse.com/\">Treehouse</a> were not around, so when I searched the web for \"how to make a website\", I found a book called <a href=\"https://www.sitepoint.com/premium/books/build-your-own-website-the-right-way-using-html-css-3rd-edition\">Build Your Own Website The Right Way Using HTML &amp; CSS</a> by Ian Lloyd. From the very first page I was hooked. I loved the tone of the book and the project based approach to explaining the fundamentals of HTML and CSS. By following the examples in the book I was able to create a website for a fictitious diving club called \"Bubble Under\" and I was absolutely chuffed with myself.</p>\n\t<p>Some time passed and I bought a few more books about CSS and learned new ways to layout web pages and it was fun. I started writing a blog and made a few different websites that never saw the fibre optic light of day. By that time I had moved to Reading, met my now wife and changed several sales related jobs along the way. I kept my personal blog going and it was a great place to experiment with the techniques that I was learning. At the time, when I wrote a new blog post, I used to share it on FaceBook for my friends to see. It was this very event that led to one of my friends reaching out to me and asking if I would be interested in a position at the company he worked for. The job was for a company called Perform, a sports media company who built and supported an array of websites mainly offering live video streaming of a variety of different sporting events. I remember going in for the interview with my CV and a handful of websites I had built to practice my skills. I was so nervous that my leg seized up and I literally had to hobble into the office for the interview. I had no commercial web experience at the time, but I think my enthusiasm got me through. I remember being terrified by JavaScript and completely flunking one of the questions which asked how I could display the date on the page using JavaScript. It didn't seem to be a showstopper, I showed that I was eager to learn and that I worked well in a team and that was more important. My wife and my 1 year old daughter waited patiently in the car and by the end of the interview I had been offered the job and I was ecstatic to be able to share the good news with them.</p>\n\t<p>I joined the Live Technical Operations team at Perform and my commercial journey in web development had began. My job was to support the websites we created and could involve anything from fixing live issues that prevented customers from viewing their content, to making updates to the existing websites. It was tough, I had to learn an awful lot and relatively quickly, but I seemed to settle in well within the team and made some good friends. I carried on cultivating my passion for web development and I knew that I had to face my demon, which at the time was JavaScript. The old approach of picking up a book and working through it, didn't seem to be as successful, JavaScript was definitely a harder nut to crack. By that time more online video courses were becoming available and I watched countless hours of them and completed many different excercises, but it just didn't seem to click. It wasn't until I joined a digital agency called HeathWallace, that I really started to get a grasp on JavaScript, and that was in large part thanks to my manager at the time, Michael Nelson. His knowledge, enthusiasm and ability to explain programming concepts helped me to become proficient in writing JavaScript. Once again, I was hooked. The more I learned about JavaScript, the more I liked it, and more importantly the more I realised how much more there was to learn. I was introduced to Object Oriented programming and creating re-usable components, firstly with an in-house widget library and later with AngularJS. I had a little peep at some unit tests but didn't really get them or the value they added. I learned about Node.js and my mind was blown, JavaScript could run outside of a browser!</p>\n\t<p>Angular started to take off and I was keen to get some more experience with it so I moved on to pastures new with Hitachi. That was my first experience of working within a big development team on a big budget project. I met some great people and learned more about working within an Agile team. I became accustomed to Angular and realised that JS frameworks needn't be as intimidating as I once thought. I started to like writing unit tests and learned how to use Karma and Jasmine. I realised how important they were this time and how many times they would help to avoid introducing bugs into the codebase. As things started to wind down at Hitachi, people started to leave and around that time my friend, Jon Frost, from the HeathWallace days, approached me about a job working with him at Yell. It was a good decision, I joined a cracking team of talented developers and people that really cared about their craft. I learned Vue.js, wrote more unit tests, with Jest this time and even wrote a Node.js and Express app.</p>\n\t<p>Enter the Coronavirus. The world was turned on its head and Yell started to feel the impact. Many hundreds of people were put on furlough and a great deal were made redundant after that. The Engineering team was safe for a while, but eventually the cuts reached us too. As people started to be made redundant around me, I started to have a look around. I contacted my previous manager at Yell, Steve Workman, and he made me aware of an opening at Maersk. I applied to some other places too, but the further I got in the process with Maersk the more I was excited about the opportunity. So that brings us up to speed to today. Yesterday I handed in my notice and now I am looking ahead to a new experience with Maersk, hoping the future will be bright and that we can overcome the challenges that the current pandemic has presented us.</p>\n\t<p>So here it goes again. Another fresh start for my blog and it feels like the right time to do it. I want to have a bit of fun with it, think carefully about the tools and frameworks that I use and whether or not I actually need them. With each post I want to improve the blog in different ways, whether that's how it looks, a new piece of content or some sort of architecture behind the scenes. It's really an experiment and my intention with this blog is to document it every step of the way. As I write this, there are literally a handful of files in the code base including the home page, the page for this post and the .gitignore file. So it's basically just HTML, there aren't even any styles for now. With every commit I want to add little enhancements, that way it will be easy to go back in time and see the previous iterations of the blog. It should be interesting enough to keep me writing.</p>\n</article>"},{"timestamp":1602025200000,"author":"Paolo","title":"Quick play with Deno ðŸ¦•","postFileContent":"<article\n\tdata-published-date=\"2020-10-07-00-00-00\"\n\tdata-author=\"Paolo\"\n>\n\t<h2>Quick play with Deno ðŸ¦•</h2>\n\t<p>Posted by Paolo on 7th October 2020</p>\n\t<p><a href=\"https://deno.land/\">Deno</a> was released earlier this year and I thought I would have a quick play to get familiar with it. Deno is a JavaScript and TypeScript runtime made by the creator of Node.js, Ryan Dahl. It has more of a focus on security, not allowing reading of the file system or network access by default, instead allowing the user to control this using runtime flags like <code>--allow-read</code> and <code>--allow-net</code>. The other cool thing is that you can use the ES module syntax to import modules and even import external resources using a URL. Thanks to this feature the concept of the package.json file has been scrapped and all dependencies are cached and compiled by Deno. If you want to ensure you get the latest version of an external module you can run Deno again using <code>--reload</code> which will make a new request for the module and update the cache. The API feels quite intuitive to use, the error messages are clear and it is possible to get started with a simple example quickly.</p>\n\t<p>One of the things that I used to do with Node was watch files for changes and then re-run a particular task. To do this I had to normally include an extra dependency like node-watch. With Deno this is possible out of the box using the <code>--watch</code> flag. I headed over to the <a href=\"https://deno.land/manual@v1.4.4/getting_started/installation\">installation guide</a> and followed along to get setup. Then I tried the example below to make sure the installation was successful:</p>\n\t<p><code>deno run https://deno.land/std/examples/welcome.ts</code></p>\n\t<p>If all goes well you should have seen a message saying \"Welcome to Deno ðŸ¦•\". The module which is being executed is external and if you visit the url you can see it consists of a simple <code>console.log()</code> statement. There are a variety of <a href=\"https://deno.land/std@0.73.0\">standard Deno modules</a> available which augment the existing Deno API.</p>\n\t<p>Once I installed Deno, I created a sample project directory and within it I created a file called denoTest.js. <strong>Important:</strong> The first name I used for the file was test.js, but this had some funny side effects, particularly when it came to caching imported dependencies. I think this is because it clashed with one of the Deno commands named test. Then I created another file called dep1.js and in that I exported a simple string value as shown below:</p>\n\t<p><pre><code>export default 'Foo!';</code></pre></p>\n\t<p>Back in the denoTest.js file I imported the dep1.js default value and logged this to the console as shown below:</p>\n<pre><code>import val from './dep1.js';\nconsole.log('The value from dep1 is: ', val);</code></pre>\n\t<p>Finally all that remains to be done is to run the denoTest.js file using Deno.</p>\n\t<p><code>deno run --unstable --watch denoTest.js</code></p>\n\t<p>I had to also add the <code>--unstable</code> flag because Deno complained when I didn't use that in combination with the <code>--watch</code> flag. The description in the docs suggests that this flag allows you enable unstable APIs. I assume this is necessary when files are changing because APIs could potentially become unstable? Anyhow, when you run that command you should find that if you make any changes to the dep1.js file, the denoTest.js file is executed again. So if you were to change the value exported from 'Foo' to 'Bar', you should find that the value logged in the console is updated to reflect that.</p>\n</article>"},{"timestamp":1601852400000,"author":"Paolo","title":"Making text more readable","postFileContent":"<article \n\tdata-published-date=\"2020-10-05-00-00-00\"\n\tdata-author=\"Paolo\"\n>\n\t<h2>Making text more readable</h2>\n\t<p>Posted by Paolo on 5th October 2020</p>\n\t<p>As the first little enhancement to this blog, I wanted to make the text a little more readable. The default web font for most web browsers seems to be a serif font. I'm not sure why that is, because generally the consensus is that sans-serif fonts are easier to read on screens. I'm going to get round to choosing a font later on, but for now I'm going to use whatever the default sans-serif font is on the system the user is browsing on. I'm using MacOS so the rendered font will be Helvetica, I think for Microsoft it is Arial.</p>\n\t<p>To do this first I need to link a stylesheet. I created a new file called main.css in the root of my project. Then I included it in each HTML file where I wanted to use the styles. To include the stylesheet I used a link tag and set the relevant attributes as shown below:</p>\n\t<p><code>&lt;link rel=\"stylesheet\" href=\"../main.css\"&gt;</code></p>\n\t<p>Within the CSS file I added two rulesets. I needed a bit of a refresher on CSS terminology and I found <a href=\"https://css-tricks.com/css-ruleset-terminology/\">this post on CSS tricks</a> which as usual explains it really well. Below is the CSS I added:</p>\n<pre><code>body {\n    font-family: sans-serif;\n}\n\np {\n    line-height: 1.5;\n}</code></pre>\n\t<p>The first ruleset sets the font of the body element to sans-serif and the second increases the line height for each p element so there is more space between each line. That should make it easier to follow the text from one line to the next.</p>\n</article>"},{"timestamp":1601852400000,"author":"Paolo","title":"Desktop layout adjustments","postFileContent":"<article \n\tdata-published-date=\"2020-10-05-00-00-00\"\n\tdata-author=\"Paolo\"\n>\n\t<h2>Desktop layout adjustments</h2>\n\t<p>Posted by Paolo on 5th October 2020</p>\n\t<p>So far I've been building this website using a mobile first approach. Previously on desktop, the text stretched across the entire width of the viewport. Long lines like this don't make for very comfortable reading and I don't want to be responsible for any neck aches. I can take care of this with a few lines of CSS by ensuring that the content doesn't stretch any wider than a given amount and that when the viewport is wide enough, the content is in the centre of the page. Below is the CSS that will give me the desired effect (the parts in bold are the ones that have changed):</p>\n<pre><code>body {\n    font-family: sans-serif;\n    <strong>margin: 8px;\n    max-width: 600px;</strong>\n}</code></pre>\n\t<p>I made a couple of changes to the ruleset which affects the body element. I added a margin of 8px all around and then I set the max-width property to 600px. The max-width property will mean that no matter how wide the viewport gets, the content will only ever occupy 600px. This should mean that the line length is closer to the recommended 40-75 characters (probably just a little over). Now what remains to be done is to centre the content when the viewport gets to a certain width. To do this I need to add a bit more CSS and include a media query as shown below:</p>\n<pre><code>@media only screen and (min-width: 616px) {\n    body {\n        margin: 8px auto;\n    }\n}</code></pre>\n\t<p>The styles within the media query will only be applied if the media type is screen and the min-width is 616px. In some older browsers this syntax will not work as expected and the styles will be applied even if the conditions aren't met. To prevent this I added the only keyword which modern browsers will ignore, but in older browsers it will stop the styles within the media query being applied. The CSS ruleset within the media query changes the margin property so that there are 8px on the top and bottom and the value of auto is set to the right and left. When you set the lateral margins to auto and set either a width or a max-width on an element it will center it when the viewport size is large enough. The reason I'm including this style within a media query is because I want to make sure that when the viewport is smaller, there is still a margin between the content and the edge of the viewport.</p>\n</article>"}]